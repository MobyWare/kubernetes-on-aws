{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Kubernetes AWS Cluster",
  "Mappings": {
    "RegionMap": {
      "eu-central-1": {
        "stable": "ami-eb3b6198"
      },
      "eu-west-1": {
        "stable": "ami-e3d6ab90"
      },
      "us-east-1": {
        "stable": "ami-7ee7e169"
      },
      "us-east-2": {
        "stable": "ami-f8aaf09d"
      },
      "us-west-1": {
        "stable": "ami-f7df8897"
      },
      "us-west-2": {
        "stable": "ami-d0e54eb0"
      }
    }
  },
  "Parameters": {
    "APIServerCert": {
      "Description": "PEM-formatted kube-apiserver certificate, base64-encoded",
      "Type": "String"
    },
    "APIServerKey": {
      "Description": "PEM-formatted kube-apiserver key, base64-encoded",
      "Type": "String"
    },
    "ArtifactURL": {
      "Default": "https://raw.githubusercontent.com/upmc-enterprises/kubernetes-on-aws/v1.5.7/scripts/install-scripts",
      "Description": "Public location of kubernetes deployment artifacts",
      "Type": "String"
    },
    "ClusterName": {
      "Default": "kubernetes",
      "Description": "Name of Kubernetes cluster",
      "Type": "String"
    },
    "RouteTableNAT": {
      "Default": "",
      "Description": "Id of the route table to route to the NAT instance",
      "Type": "String"
    },
    "k8sSubnetCidrBlockPrivateAZ1": {
      "Default": "10.0.70.0/24",
      "Description": "CIDR block for kubernetes subnet (AZ1)",
      "Type": "String"
    },
    "k8sSubnetCidrBlockPrivateAZ2": {
      "Default": "10.0.71.0/24",
      "Description": "CIDR block for kubernetes subnet (AZ2)",
      "Type": "String"
    },
    "k8sSubnetCidrBlockPrivateAZ3": {
      "Default": "10.0.72.0/24",
      "Description": "CIDR block for kubernetes subnet (AZ3)",
      "Type": "String"
    },
    "EC2BootVolumeSizeGB": {
      "Default": "50",
      "Description": "Size in GB for boot volumes",
      "Type": "String"
    },
    "ApplicationVPC": {
      "Default": "",
      "Description": "VPC for kubernetes application to be deployed into",
      "Type": "AWS::EC2::VPC::Id"
    },
    "AvailabilityZone1": {
      "Default": "us-east-1b",
      "Description": "First availability zone",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "AvailabilityZone2": {
      "Default": "us-east-1a",
      "Description": "Second availability zone",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "AvailabilityZone3": {
      "Default": "us-east-1d",
      "Description": "Third availability zone",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "CACert": {
      "Description": "PEM-formattd CA certificate, base64-encoded",
      "Type": "String"
    },
    "ControllerInstanceType": {
      "Default": "m3.medium",
      "Description": "EC2 instance type used for each controller instance",
      "Type": "String",
      "AllowedValues": [
        "t2.micro",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ]
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "cdris-virginia-kubernetes",
      "Description": "Name of SSH keypair to authorize on each instance"
    },
    "ReleaseChannel": {
      "AllowedValues": [
        "stable"
      ],
      "Default": "stable",
      "Description": "CoreOS Linux release channel to use as instance operating system",
      "Type": "String"
    },
    "WorkerCert": {
      "Description": "PEM-formatted kubelet (worker) certificate, base64-encoded",
      "Type": "String"
    },
    "WorkerCount": {
      "Default": "1",
      "Description": "Number of worker instances to create, may be modified later",
      "Type": "String"
    },
    "WorkerInstanceType": {
      "Default": "m3.medium",
      "Description": "EC2 instance type used for each worker instance",
      "Type": "String",
      "AllowedValues": [
        "t2.micro",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "m4.large",
        "m4.xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ]
    },
    "WorkerKey": {
      "Description": "PEM-formatted kubelet (worker) key, base64-encoded",
      "Type": "String"
    }
  },
  "Resources": {
    "AlarmControllerRecover": {
      "Properties": {
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:automate:",
                {
                  "Ref": "AWS::Region"
                },
                ":ec2:recover"
              ]
            ]
          }
        ],
        "AlarmDescription": "Trigger a recovery when system check fails for 5 consecutive minutes.",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "InstanceController"
            }
          }
        ],
        "EvaluationPeriods": "5",
        "MetricName": "StatusCheckFailed_System",
        "Namespace": "AWS/EC2",
        "Period": "60",
        "Statistic": "Minimum",
        "Threshold": "0"
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "AutoScaleWorker": {
      "Properties": {
        "AvailabilityZones": [
          {
            "Ref": "AvailabilityZone1"
          },
          {
            "Ref": "AvailabilityZone2"
          },
          {
            "Ref": "AvailabilityZone3"
          }
        ],
        "DesiredCapacity": {
          "Ref": "WorkerCount"
        },
        "HealthCheckGracePeriod": 600,
        "HealthCheckType": "EC2",
        "LaunchConfigurationName": {
          "Ref": "LaunchConfigurationWorker"
        },
        "MaxSize": {
          "Ref": "WorkerCount"
        },
        "MinSize": {
          "Ref": "WorkerCount"
        },
        "Tags": [
          {
            "Key": "ApplicationCluster",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "ClusterName"
            }
          },
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": "kube-aws-worker"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "k8sSubnetA"
          },
          {
            "Ref": "k8sSubnetB"
          },
          {
            "Ref": "k8sSubnetC"
          }
        ]
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup"
    },
    "IAMInstanceProfileController": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRoleController"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "IAMInstanceProfileWorker": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRoleWorker"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "IAMRoleController": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ec2:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": "elasticloadbalancing:*",
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "root"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "IAMRoleWorker": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ec2:Describe*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": "ec2:AttachVolume",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": "ec2:DetachVolume",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:GetAuthorizationToken",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetRepositoryPolicy",
                    "ecr:DescribeRepositories",
                    "ecr:ListImages",
                    "ecr:BatchGetImage"
                  ],
                  "Resource": "*"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "root"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "InstanceController": {
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone1"
        },
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfileController"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": {
                "Ref": "EC2BootVolumeSizeGB"
              }
            }
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "ReleaseChannel"
            }
          ]
        },
        "InstanceType": {
          "Ref": "ControllerInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": false,
            "DeleteOnTermination": true,
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "SecurityGroupController"
              }
            ],
            "PrivateIpAddress": "10.0.70.50",
            "SubnetId": {
              "Ref": "k8sSubnetA"
            }
          }
        ],
        "Tags": [
          {
            "Key": "ApplicationCluster",
            "Value": {
              "Ref": "ClusterName"
            }
          },
          {
            "Key": "Name",
            "Value": "kube-aws-controller"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\ncoreos:\n  update:\n    reboot-strategy: \"off\"\n\n  flannel:\n    interface: $private_ipv4\n\n  etcd2:\n    name: controller\n    advertise-client-urls: http://$private_ipv4:2379\n    initial-advertise-peer-urls: http://$private_ipv4:2380\n    listen-client-urls: http://0.0.0.0:2379\n    listen-peer-urls: http://0.0.0.0:2380\n    initial-cluster: controller=http://$private_ipv4:2380\n\n  units:\n  - name: etcd2.service\n    command: start\n\n  - name: install-controller.service\n    command: start\n    content: |\n      [Service]\n      ExecStart=/bin/bash /tmp/install-controller.sh\n      Type=oneshot\n\nwrite_files:\n- path: /run/coreos-kubernetes/options.env\n  content: |\n    ETCD_ENDPOINTS=http://127.0.0.1:2379\n    ARTIFACT_URL=",
                {
                  "Ref": "ArtifactURL"
                },
                "\n\n- path: /tmp/install-controller.sh\n  content: |\n    #!/bin/bash\n\n    exec bash -c \"$(curl --fail --silent --show-error --location '",
                {
                  "Ref": "ArtifactURL"
                },
                "/scripts/install-controller.sh')\"\n\n- path: /etc/kubernetes/ssl/ca.pem\n  encoding: base64\n  content: ",
                {
                  "Ref": "CACert"
                },
                "\n\n- path: /etc/kubernetes/ssl/apiserver.pem\n  encoding: base64\n  content: ",
                {
                  "Ref": "APIServerCert"
                },
                "\n\n- path: /etc/kubernetes/ssl/apiserver-key.pem\n  encoding: base64\n  content: ",
                {
                  "Ref": "APIServerKey"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    },
    "LaunchConfigurationWorker": {
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": {
                "Ref": "EC2BootVolumeSizeGB"
              }
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfileWorker"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "ReleaseChannel"
            }
          ]
        },
        "InstanceType": {
          "Ref": "WorkerInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroupWorker"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\ncoreos:\n  update:\n    reboot-strategy: \"off\"\n\n  flannel:\n    interface: $private_ipv4\n    etcd_endpoints: http://10.0.70.50:2379\n\n  units:\n  - name: install-worker.service\n    command: start\n    content: |\n      [Service]\n      ExecStart=/bin/bash /tmp/install-worker.sh\n      Type=oneshot\n\nwrite_files:\n- path: /run/coreos-kubernetes/options.env\n  content: |\n    ETCD_ENDPOINTS=http://10.0.70.50:2379\n    CONTROLLER_ENDPOINT=https://10.0.70.50\n    ARTIFACT_URL=",
                {
                  "Ref": "ArtifactURL"
                },
                "\n\n- path: /tmp/install-worker.sh\n  content: |\n    #!/bin/bash\n\n    exec bash -c \"$(curl --fail --silent --show-error --location '",
                {
                  "Ref": "ArtifactURL"
                },
                "/scripts/install-worker.sh')\"\n\n- path: /etc/kubernetes/ssl/ca.pem\n  encoding: base64\n  content: ",
                {
                  "Ref": "CACert"
                },
                "\n\n- path: /etc/kubernetes/ssl/worker.pem\n  encoding: base64\n  content: ",
                {
                  "Ref": "WorkerCert"
                },
                "\n\n- path: /etc/kubernetes/ssl/worker-key.pem\n  encoding: base64\n  content: ",
                {
                  "Ref": "WorkerKey"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "SecurityGroupELB": {
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          }
        ],
        "Tags": [
          {
            "Key": "ApplicationCluster",
            "Value": {
              "Ref": "ClusterName"
            }
          }
        ],
        "VpcId": {
          "Ref": "ApplicationVPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "SecurityGroupController": {
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "tcp",
            "ToPort": 65535
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "udp",
            "ToPort": 65535
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 8080,
            "IpProtocol": "tcp",
            "ToPort": 8080
          }
        ],
        "Tags": [
          {
            "Key": "ApplicationCluster",
            "Value": {
              "Ref": "ClusterName"
            }
          }
        ],
        "VpcId": {
          "Ref": "ApplicationVPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "SecurityGroupControllerIngressFromWorkerToEtcd": {
      "Properties": {
        "FromPort": 2379,
        "GroupId": {
          "Ref": "SecurityGroupController"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 2379
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorker": {
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "tcp",
            "ToPort": 65535
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "udp",
            "ToPort": 65535
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          }
        ],
        "Tags": [
          {
            "Key": "ApplicationCluster",
            "Value": {
              "Ref": "ClusterName"
            }
          }
        ],
        "VpcId": {
          "Ref": "ApplicationVPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "SecurityGroupWorkerIngressFromControllerToFlannel": {
      "Properties": {
        "FromPort": 8285,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "udp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 8285
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromControllerToKubelet": {
      "Properties": {
        "FromPort": 10250,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 10250
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromWorkerToFlannel": {
      "Properties": {
        "FromPort": 8285,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "udp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 8285
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "k8sSubnetA": {
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone1"
        },
        "CidrBlock": {
          "Ref": "k8sSubnetCidrBlockPrivateAZ1"
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": "k8sSubnetA"
          },
          {
            "Key": "ApplicationCluster",
            "Value": {
              "Ref": "ClusterName"
            }
          }
        ],
        "VpcId": {
          "Ref": "ApplicationVPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "k8sSubnetB": {
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone2"
        },
        "CidrBlock": {
          "Ref": "k8sSubnetCidrBlockPrivateAZ2"
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": "k8sSubnetB"
          },
          {
            "Key": "ApplicationCluster",
            "Value": {
              "Ref": "ClusterName"
            }
          }
        ],
        "VpcId": {
          "Ref": "ApplicationVPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "k8sSubnetC": {
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone3"
        },
        "CidrBlock": {
          "Ref": "k8sSubnetCidrBlockPrivateAZ3"
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": "k8sSubnetC"
          },
          {
            "Key": "ApplicationCluster",
            "Value": {
              "Ref": "ClusterName"
            }
          }
        ],
        "VpcId": {
          "Ref": "ApplicationVPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "k8sSubnetRouteTableAssociationA": {
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTableNAT"
        },
        "SubnetId": {
          "Ref": "k8sSubnetA"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "k8sSubnetRouteTableAssociationB": {
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTableNAT"
        },
        "SubnetId": {
          "Ref": "k8sSubnetB"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "k8sSubnetRouteTableAssociationC": {
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTableNAT"
        },
        "SubnetId": {
          "Ref": "k8sSubnetC"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }
  }
}
